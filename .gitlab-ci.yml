stages:
  - lint
  - test
  - build

variables:
  POSTGRES_USER: 'scraper_etsy'
  POSTGRES_PASSWORD: ''
  POSTGRES_DB: 'test_scraper_etsy'
  POSTGRES_HOST_AUTH_METHOD: trust
  CELERY_BROKER_URL: 'redis://redis:6379/0'

flake8:
  stage: lint
  image: python:3.7-alpine
  before_script:
    - pip install -q flake8
  script:
    - flake8

pytest:
  stage: test
  image: python:3.7
  tags:
    - docker
  services:
    - docker
  before_script:
    - docker-compose -f local.yml build
    # Ensure celerybeat does not crash due to non-existent tables
    - docker-compose -f local.yml run --rm django python manage.py migrate
    - docker-compose -f local.yml up -d
  script:
    - docker-compose -f local.yml run django pytest

build:
  stage: build
  before_script:
    - export IMAGE=$OWNER/$CI_PROJECT_NAME
    - export DJANGO_IMAGE=$IMAGE:django
    - export NODE_IMAGE=$IMAGE:node
  script:
#    - apk add --no-cache bash
#    - chmod +x ./setup_env.sh
#    - bash ./setup_env.sh
#    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:django || true
    - docker pull $IMAGE:node || true
    - docker-compose -f production.yml build
    - docker push $IMAGE:web
    - docker push $IMAGE:node
  only:
    refs:
      - dev
