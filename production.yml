version: '3'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_redis_volume: {}
  production_traefik: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: shevchenkoigor/scraper_etsy:django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start

  node:
    build:
      context: ./frontend
      dockerfile: ../compose/local/node/Dockerfile
    image: shevchenkoigor/scraper_etsy:node
    depends_on:
      - django
    volumes:
      - ./frontend:/app
      # http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html
      - /app/node_modules
    command: npm start

  traefik:
    build:
      context: .
      dockerfile: ./compose/production/traefik/Dockerfile
    image: scraper_etsy_production_traefik
    depends_on:
      - node
      - flower
      - postgres
    volumes:
      - production_traefik:/etc/traefik/acme
    ports:
      - "0.0.0.0:80:3000"
      - "0.0.0.0:5555:5555"
      - "0.0.0.0:5432:5432"

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: scraper_etsy_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres

  redis:
    image: redis:5.0
    volumes:
      - production_redis_volume:/data

  celeryworker:
    <<: *django
    image: scraper_etsy_production_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: scraper_etsy_production_celerybeat
    command: /start-celerybeat

  flower:
    <<: *django
    image: scraper_etsy_production_flower
    command: /start-flower
